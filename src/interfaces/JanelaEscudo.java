/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaces;

import com.sun.javafx.scene.control.skin.VirtualFlow;
import entidades.Escudo;
import entidades.FileRenderer;
import entidades.GenericListModel;
import entidades.Iniciativa;
import entidades.Personagem;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import persistencia.Arquivo;

/**
 *
 * @author alik
 */
public class JanelaEscudo extends javax.swing.JFrame {

    final String PATH = System.getProperty("user.dir") + "//files//personagens";
    DefaultTableModel jogadoresModel;
    DefaultTableModel inimigosModel;
    DefaultTableModel turn_orderModel;
    DefaultListModel<File> filesModel = new GenericListModel<>(Arquivo.getArquivos(PATH));
    Arquivo<Personagem> arq = new Arquivo<>(PATH);
    boolean jogador;
    int pos = -1;
    boolean salvo;
    
    final String PATH_ESC = System.getProperty("user.dir") + "//files//escudos";
    Arquivo<Escudo> arq_esc = new Arquivo<>(PATH_ESC);
    DefaultListModel<File> filesModel_esc = new GenericListModel<>(Arquivo.getArquivos(PATH_ESC));
    
    public JanelaEscudo() {
        initComponents();
        jogadoresModel = (DefaultTableModel) jogadoresTable.getModel();
        inimigosModel = (DefaultTableModel) inimigosTable.getModel();
        turn_orderModel = (DefaultTableModel) turn_orderTable.getModel();
        personagens_salvosList.setCellRenderer(new FileRenderer());
        setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
        jogadoresModel.addTableModelListener((TableModelEvent tme) -> {
            if (tme.getType() == TableModelEvent.UPDATE) {
                msg_salvo_jogLabel.setText("Alterações não ainda não foram salvas");
                msg_salvo_jogLabel.setForeground(Color.red);
                salvo = false;
            }
        });
        inimigosModel.addTableModelListener((TableModelEvent tme) -> {
            if (tme.getType() == TableModelEvent.UPDATE) {
                msg_salvo_inimLabel.setText("Alterações não ainda não foram salvas");
                msg_salvo_inimLabel.setForeground(Color.red);
                salvo = false;
            }
        });
        escudos_salvosList.setCellRenderer(new FileRenderer());
    
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        janela_add_jogadoresFrame = new javax.swing.JFrame();
        personagens_cadastradosLabel = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        personagens_salvosList = new javax.swing.JList();
        adicionar_perButtonJanela = new javax.swing.JButton();
        janela_add_iniciativaFrame = new javax.swing.JFrame();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        nome_janela_iniciativaTextField = new javax.swing.JTextField();
        ini_janela_iniciativaTextField = new javax.swing.JTextField();
        hp_janela_iniciativaTextField = new javax.swing.JTextField();
        add_janela_iniciativaButton = new javax.swing.JButton();
        janela_consultar_escudosFrame = new javax.swing.JFrame();
        escudos_cadastradosLabel = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        escudos_salvosList = new javax.swing.JList();
        consultar_escButtonJanela = new javax.swing.JButton();
        excluirButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jogadoresTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        inimigosTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        turn_orderTable = new javax.swing.JTable();
        jogadoresLabel = new javax.swing.JLabel();
        turn_orderLabel = new javax.swing.JLabel();
        inimigosLabel = new javax.swing.JLabel();
        obsLabel = new javax.swing.JLabel();
        add_jogadoresButton = new javax.swing.JButton();
        rem_jogadoresButton = new javax.swing.JButton();
        add_inimigosButton = new javax.swing.JButton();
        rem_inimigosButton = new javax.swing.JButton();
        add_iniciativaButton = new javax.swing.JButton();
        rem_iniciativaButton = new javax.swing.JButton();
        anteButton = new javax.swing.JButton();
        proxButton = new javax.swing.JButton();
        add_jog_turn_orderButton = new javax.swing.JButton();
        add_ini_tun_orderButton = new javax.swing.JButton();
        salvarButton = new javax.swing.JButton();
        abrirButton = new javax.swing.JButton();
        ordenaButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        obsTextArea = new javax.swing.JTextArea();
        editarToggleButton = new javax.swing.JToggleButton();
        msg_salvo_jogLabel = new javax.swing.JLabel();
        salvar_jogadoresButton = new javax.swing.JButton();
        salvar_inimigosButton = new javax.swing.JButton();
        msg_salvo_inimLabel = new javax.swing.JLabel();
        aventuraTextField = new javax.swing.JTextField();
        aventuraLabel = new javax.swing.JLabel();

        janela_add_jogadoresFrame.setAlwaysOnTop(true);
        janela_add_jogadoresFrame.setLocation(new java.awt.Point(50, 50));
        janela_add_jogadoresFrame.setLocationByPlatform(true);
        janela_add_jogadoresFrame.setMinimumSize(new java.awt.Dimension(510, 250));

        personagens_cadastradosLabel.setText("Personagens Cadastrados");

        personagens_salvosList.setModel(filesModel);
        personagens_salvosList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                adicionarPersonagemClick(evt);
            }
        });
        jScrollPane4.setViewportView(personagens_salvosList);

        adicionar_perButtonJanela.setText("Adicionar");
        adicionar_perButtonJanela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPersJanela(evt);
            }
        });

        javax.swing.GroupLayout janela_add_jogadoresFrameLayout = new javax.swing.GroupLayout(janela_add_jogadoresFrame.getContentPane());
        janela_add_jogadoresFrame.getContentPane().setLayout(janela_add_jogadoresFrameLayout);
        janela_add_jogadoresFrameLayout.setHorizontalGroup(
            janela_add_jogadoresFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(janela_add_jogadoresFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(janela_add_jogadoresFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(janela_add_jogadoresFrameLayout.createSequentialGroup()
                        .addComponent(personagens_cadastradosLabel)
                        .addGap(0, 339, Short.MAX_VALUE))
                    .addComponent(jScrollPane4)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, janela_add_jogadoresFrameLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(adicionar_perButtonJanela)))
                .addContainerGap())
        );
        janela_add_jogadoresFrameLayout.setVerticalGroup(
            janela_add_jogadoresFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(janela_add_jogadoresFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(personagens_cadastradosLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(adicionar_perButtonJanela)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        janela_add_iniciativaFrame.setMinimumSize(new java.awt.Dimension(236, 191));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Nome");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Iniciativa");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("HP");

        nome_janela_iniciativaTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        nome_janela_iniciativaTextField.setNextFocusableComponent(ini_janela_iniciativaTextField);

        ini_janela_iniciativaTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ini_janela_iniciativaTextField.setText("0");
        ini_janela_iniciativaTextField.setNextFocusableComponent(hp_janela_iniciativaTextField);

        hp_janela_iniciativaTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        hp_janela_iniciativaTextField.setText("0");
        hp_janela_iniciativaTextField.setNextFocusableComponent(add_janela_iniciativaButton);

        add_janela_iniciativaButton.setText("Adicionar");
        add_janela_iniciativaButton.setNextFocusableComponent(nome_janela_iniciativaTextField);
        add_janela_iniciativaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNovaIniTurnOrder(evt);
            }
        });

        javax.swing.GroupLayout janela_add_iniciativaFrameLayout = new javax.swing.GroupLayout(janela_add_iniciativaFrame.getContentPane());
        janela_add_iniciativaFrame.getContentPane().setLayout(janela_add_iniciativaFrameLayout);
        janela_add_iniciativaFrameLayout.setHorizontalGroup(
            janela_add_iniciativaFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(janela_add_iniciativaFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(janela_add_iniciativaFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, janela_add_iniciativaFrameLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(add_janela_iniciativaButton))
                    .addGroup(janela_add_iniciativaFrameLayout.createSequentialGroup()
                        .addGroup(janela_add_iniciativaFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(janela_add_iniciativaFrameLayout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nome_janela_iniciativaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(janela_add_iniciativaFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, janela_add_iniciativaFrameLayout.createSequentialGroup()
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(hp_janela_iniciativaTextField))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, janela_add_iniciativaFrameLayout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(ini_janela_iniciativaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        janela_add_iniciativaFrameLayout.setVerticalGroup(
            janela_add_iniciativaFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(janela_add_iniciativaFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(janela_add_iniciativaFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nome_janela_iniciativaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(janela_add_iniciativaFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ini_janela_iniciativaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(janela_add_iniciativaFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(hp_janela_iniciativaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(add_janela_iniciativaButton)
                .addContainerGap())
        );

        janela_consultar_escudosFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        janela_consultar_escudosFrame.setLocation(new java.awt.Point(50, 50));
        janela_consultar_escudosFrame.setLocationByPlatform(true);
        janela_consultar_escudosFrame.setMinimumSize(new java.awt.Dimension(510, 250));

        escudos_cadastradosLabel.setText("Escudos Salvos");

        escudos_salvosList.setModel(filesModel_esc);
        escudos_salvosList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                escudos_salvosListadicionarPersonagemClick(evt);
            }
        });
        jScrollPane7.setViewportView(escudos_salvosList);

        consultar_escButtonJanela.setText("Consultar");
        consultar_escButtonJanela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultarEscudo(evt);
            }
        });

        excluirButton.setText("Excluir");
        excluirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluirEscudo(evt);
            }
        });

        javax.swing.GroupLayout janela_consultar_escudosFrameLayout = new javax.swing.GroupLayout(janela_consultar_escudosFrame.getContentPane());
        janela_consultar_escudosFrame.getContentPane().setLayout(janela_consultar_escudosFrameLayout);
        janela_consultar_escudosFrameLayout.setHorizontalGroup(
            janela_consultar_escudosFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(janela_consultar_escudosFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(janela_consultar_escudosFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(janela_consultar_escudosFrameLayout.createSequentialGroup()
                        .addComponent(escudos_cadastradosLabel)
                        .addGap(0, 401, Short.MAX_VALUE))
                    .addComponent(jScrollPane7)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, janela_consultar_escudosFrameLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(excluirButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(consultar_escButtonJanela)))
                .addContainerGap())
        );
        janela_consultar_escudosFrameLayout.setVerticalGroup(
            janela_consultar_escudosFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(janela_consultar_escudosFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(escudos_cadastradosLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(janela_consultar_escudosFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(consultar_escButtonJanela)
                    .addComponent(excluirButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocationByPlatform(true);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clickJanela(evt);
            }
        });

        jogadoresTable.setFont(new java.awt.Font("Noto Sans", 1, 20)); // NOI18N
        jogadoresTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Personagem", "HP", "HP Temp.", "C.A.", "Iniciativa"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jogadoresTable.setRowHeight(25);
        jogadoresTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jogadoresTable);

        inimigosTable.setFont(new java.awt.Font("Noto Sans", 1, 20)); // NOI18N
        inimigosTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Personagem", "HP", "HP Temp.", "C.A.", "Iniciativa"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        inimigosTable.setRowHeight(25);
        jScrollPane2.setViewportView(inimigosTable);

        turn_orderTable.setFont(new java.awt.Font("Noto Sans", 1, 20)); // NOI18N
        turn_orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Iniciativa", "Personagem", "HP"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        turn_orderTable.setEnabled(false);
        turn_orderTable.setRequestFocusEnabled(false);
        turn_orderTable.setRowHeight(30);
        jScrollPane3.setViewportView(turn_orderTable);

        jogadoresLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jogadoresLabel.setText("Jogadores");

        turn_orderLabel.setText("Turn Order");

        inimigosLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        inimigosLabel.setText("Inimigos");

        obsLabel.setText("Observações");

        add_jogadoresButton.setText("Adicionar");
        add_jogadoresButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionarJogadorJanela(evt);
            }
        });

        rem_jogadoresButton.setText("Remover");
        rem_jogadoresButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerJogadorButton(evt);
            }
        });

        add_inimigosButton.setText("Adicionar");
        add_inimigosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionarInimigoJanela(evt);
            }
        });

        rem_inimigosButton.setText("Remover");
        rem_inimigosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerInimigoButton(evt);
            }
        });

        add_iniciativaButton.setText("Adicionar");
        add_iniciativaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNovaIniciativa(evt);
            }
        });

        rem_iniciativaButton.setText("Remover");
        rem_iniciativaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remNovaIniciativa(evt);
            }
        });

        anteButton.setText("Anterior");
        anteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anteriorTurnOrder(evt);
            }
        });

        proxButton.setText("Próximo");
        proxButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proximoTurnOrder(evt);
            }
        });

        add_jog_turn_orderButton.setText("Ad. Turn Order");
        add_jog_turn_orderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJogTurnOrder(evt);
            }
        });

        add_ini_tun_orderButton.setText("Ad. Turn Order");
        add_ini_tun_orderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addInimTurnOrder(evt);
            }
        });

        salvarButton.setText("Salvar");
        salvarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarEscudo(evt);
            }
        });

        abrirButton.setText("Abrir");
        abrirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirEscudoJanela(evt);
            }
        });

        ordenaButton.setText("Ordenar");
        ordenaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordenaButtonActionPerformed(evt);
            }
        });

        obsTextArea.setColumns(20);
        obsTextArea.setRows(5);
        jScrollPane5.setViewportView(obsTextArea);

        editarToggleButton.setText("Editar");
        editarToggleButton.setMaximumSize(new java.awt.Dimension(61, 31));
        editarToggleButton.setMinimumSize(new java.awt.Dimension(61, 31));
        editarToggleButton.setPreferredSize(new java.awt.Dimension(61, 31));
        editarToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarTurnOrder(evt);
            }
        });

        msg_salvo_jogLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        salvar_jogadoresButton.setText("Salvar Alterações");
        salvar_jogadoresButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarAlteracoesJogadores(evt);
            }
        });

        salvar_inimigosButton.setText("Salvar Alterações");
        salvar_inimigosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarAlteracoesInimigos(evt);
            }
        });

        msg_salvo_inimLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        aventuraLabel.setText("Aventura:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 663, Short.MAX_VALUE)
                    .addComponent(jScrollPane5)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jogadoresLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(add_jogadoresButton)
                                .addGap(18, 18, 18)
                                .addComponent(rem_jogadoresButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(inimigosLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(add_inimigosButton)
                                .addGap(18, 18, 18)
                                .addComponent(rem_inimigosButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(salvar_jogadoresButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(msg_salvo_jogLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(add_jog_turn_orderButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(salvar_inimigosButton)
                                .addGap(9, 9, 9)
                                .addComponent(msg_salvo_inimLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(add_ini_tun_orderButton)
                                .addGap(3, 3, 3))))
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(obsLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(salvarButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(abrirButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(aventuraLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(aventuraTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(add_iniciativaButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rem_iniciativaButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(anteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(proxButton))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(turn_orderLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editarToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ordenaButton)))
                .addGap(53, 53, 53))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jScrollPane3))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(msg_salvo_jogLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jogadoresLabel)
                                .addComponent(add_jogadoresButton)
                                .addComponent(rem_jogadoresButton)
                                .addComponent(turn_orderLabel)
                                .addComponent(ordenaButton)
                                .addComponent(editarToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(add_jog_turn_orderButton)
                                .addComponent(salvar_jogadoresButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inimigosLabel)
                            .addComponent(add_inimigosButton)
                            .addComponent(rem_inimigosButton)
                            .addComponent(add_ini_tun_orderButton)
                            .addComponent(salvar_inimigosButton)
                            .addComponent(msg_salvo_inimLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(obsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salvarButton)
                    .addComponent(abrirButton)
                    .addComponent(anteButton)
                    .addComponent(proxButton)
                    .addComponent(add_iniciativaButton)
                    .addComponent(rem_iniciativaButton)
                    .addComponent(aventuraTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aventuraLabel)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void ordenaTurnOrder(){
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(turn_orderTable.getModel());
        turn_orderTable.setRowSorter(sorter);
        List<RowSorter.SortKey> sortKeys = new ArrayList<>();

        int columnIndexToSort = 0;
        sortKeys.add(new RowSorter.SortKey(columnIndexToSort, SortOrder.DESCENDING));

        sorter.setSortKeys(sortKeys);
        sorter.sort();
    }
    
    private void adicionarJogadorJanela(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionarJogadorJanela
        jogador = true;
        janela_add_jogadoresFrame.setVisible(true);
    }//GEN-LAST:event_adicionarJogadorJanela

    private void addPersJanela(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPersJanela
        File file = (File)personagens_salvosList.getSelectedValue();
        Personagem per;
        try {
            per = arq.carregar(file.getAbsolutePath());
            if(jogador)
                jogadoresModel.insertRow(jogadoresModel.getRowCount(), 
                        new Object[]{
                            per,
                            per.getVida(),
                            per.getVidaTemp(),
                            per.getClasseArmadura(),
                            per.getIniciativa()});
            else
                inimigosModel.insertRow(inimigosModel.getRowCount(), 
                        new Object[]{
                            per,
                            per.getVida(),
                            per.getVidaTemp(),
                            per.getClasseArmadura(),
                            per.getIniciativa()});
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(JanelaEscudo.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_addPersJanela

    private void adicionarInimigoJanela(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionarInimigoJanela
        jogador = false;
        janela_add_jogadoresFrame.setVisible(true);
    }//GEN-LAST:event_adicionarInimigoJanela

    private void removerJogadorButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerJogadorButton
        if(jogadoresModel.getRowCount() != 0)
            jogadoresModel.removeRow(jogadoresTable.getSelectedRow());
    }//GEN-LAST:event_removerJogadorButton

    private void removerInimigoButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerInimigoButton
        if(inimigosModel.getRowCount() != 0)
            inimigosModel.removeRow(inimigosTable.getSelectedRow());
    }//GEN-LAST:event_removerInimigoButton

    private void addJogTurnOrder(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJogTurnOrder
        if(jogadoresModel.getRowCount() != 0){
            Personagem per = (Personagem) jogadoresModel.getValueAt(jogadoresTable.getSelectedRow(), 0);
            Iniciativa ini = new Iniciativa(per.getIniciativa(), per.getNome(), per.getVida() + per.getVidaTemp());

            turn_orderModel.insertRow(turn_orderModel.getRowCount(), 
                            new Object[]{
                                ini.getIniciativa(),
                                ini,
                                ini.getVida()
                            }
            );
            ordenaTurnOrder();
        }        
    }//GEN-LAST:event_addJogTurnOrder

    private void addInimTurnOrder(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addInimTurnOrder
        if(inimigosModel.getRowCount() != 0){
            Personagem per = (Personagem) inimigosModel.getValueAt(inimigosTable.getSelectedRow(), 0);
            Iniciativa ini = new Iniciativa(per.getIniciativa(), per.getNome(), per.getVida() + per.getVidaTemp());

            turn_orderModel.insertRow(turn_orderModel.getRowCount(), 
                            new Object[]{
                                ini.getIniciativa(),
                                ini,
                                ini.getVida()
                            }
            );
            ordenaTurnOrder();
        }        
    }//GEN-LAST:event_addInimTurnOrder

    private void ordenaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordenaButtonActionPerformed
        ordenaTurnOrder();
    }//GEN-LAST:event_ordenaButtonActionPerformed

    private void addNovaIniTurnOrder(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNovaIniTurnOrder
        int iniciativa = Integer.parseInt(ini_janela_iniciativaTextField.getText());
        String nome = nome_janela_iniciativaTextField.getText();
        int vida = Integer.parseInt(hp_janela_iniciativaTextField.getText());
        Iniciativa ini = new Iniciativa(iniciativa, nome, vida);
        turn_orderModel.insertRow(turn_orderModel.getRowCount(), 
                        new Object[]{
                            ini.getIniciativa(),
                            ini,
                            ini.getVida()
                        }
        );
        nome_janela_iniciativaTextField.requestFocus();
        limpaCamposJanIniciativa();
        ordenaTurnOrder();
    }//GEN-LAST:event_addNovaIniTurnOrder

    private void addNovaIniciativa(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNovaIniciativa
        limpaCamposJanIniciativa();
        janela_add_iniciativaFrame.setVisible(true);
    }//GEN-LAST:event_addNovaIniciativa

    private void proximoTurnOrder(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proximoTurnOrder
        if(turn_orderModel.getRowCount() != 0 && !editarToggleButton.isSelected()){
            pos += 1;
            if(pos != turn_orderModel.getRowCount())
                turn_orderTable.setRowSelectionInterval(pos, pos);
            else{
                turn_orderTable.setRowSelectionInterval(0, 0);
                pos = 0;
            } 
        }
            
    }//GEN-LAST:event_proximoTurnOrder

    private void anteriorTurnOrder(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anteriorTurnOrder
        if(turn_orderModel.getRowCount() != 0 && !editarToggleButton.isSelected()){
            pos -= 1;
            if(pos >= 0)
                turn_orderTable.setRowSelectionInterval(pos, pos);
            else{
                pos = turn_orderModel.getRowCount() -1;
                turn_orderTable.setRowSelectionInterval(pos, pos);
            } 
        }
    }//GEN-LAST:event_anteriorTurnOrder

    private void editarTurnOrder(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarTurnOrder
        if(!editarToggleButton.isSelected() && turn_orderModel.getRowCount() != 0){
            
            for(int i = 0; i < turn_orderModel.getRowCount(); i++){
                Iniciativa ini = new Iniciativa(
                        (int) turn_orderModel.getValueAt(i, 0), 
                        turn_orderModel.getValueAt(i, 1).toString(), 
                        (int) turn_orderModel.getValueAt(i, 2)
                );
                turn_orderModel.setValueAt(ini, i, 1);
            }
            ordenaTurnOrder();
            
        }
        turn_orderTable.setEnabled(editarToggleButton.isSelected());
    }//GEN-LAST:event_editarTurnOrder

    private void adicionarPersonagemClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_adicionarPersonagemClick
        if (evt.getClickCount() == 2 && !evt.isConsumed()) {
            evt.consume();
            File file = (File)personagens_salvosList.getSelectedValue();
            Personagem per;
            try {
                per = arq.carregar(file.getAbsolutePath());
                if(jogador)
                    jogadoresModel.insertRow(jogadoresModel.getRowCount(), 
                            new Object[]{
                                per,
                                per.getVida(),
                                per.getVidaTemp(),
                                per.getClasseArmadura(),
                                per.getIniciativa()});
                else
                    inimigosModel.insertRow(inimigosModel.getRowCount(), 
                            new Object[]{
                                per,
                                per.getVida(),
                                per.getVidaTemp(),
                                per.getClasseArmadura(),
                                per.getIniciativa()});
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(JanelaEscudo.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_adicionarPersonagemClick

    private void remNovaIniciativa(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remNovaIniciativa
        if(editarToggleButton.isSelected() && turn_orderModel.getRowCount() != 0){
            if(pos >= turn_orderTable.getSelectedRow()) pos -= 1;
            int i = turn_orderTable.convertRowIndexToModel(turn_orderTable.getSelectedRow()) ;
            turn_orderModel.removeRow(i);
        }
    }//GEN-LAST:event_remNovaIniciativa
    
    private void salvarAlteracoesJogadores(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarAlteracoesJogadores
        if(jogadoresModel.getRowCount() != 0){
            
            for(int i = 0; i < jogadoresModel.getRowCount(); i++){
                Personagem per = (Personagem) jogadoresModel.getValueAt(i, 0);
                per.setVida((int) jogadoresModel.getValueAt(i, 1));
                per.setVidaTemp((int) jogadoresModel.getValueAt(i, 2));
                per.setClasseArmadura((int) jogadoresModel.getValueAt(i, 3));
                per.setIniciativa((int) jogadoresModel.getValueAt(i, 4));
                jogadoresModel.setValueAt(per, i, 0);
            }
            msg_salvo_jogLabel.setText("Alterações salvas com sucesso!");
            msg_salvo_jogLabel.setForeground(Color.black);
            salvo = true;
            
        }
    }//GEN-LAST:event_salvarAlteracoesJogadores

    private void salvarAlteracoesInimigos(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarAlteracoesInimigos
        if(inimigosModel.getRowCount() != 0){
            
            for(int i = 0; i < inimigosModel.getRowCount(); i++){
                Personagem per = (Personagem) inimigosModel.getValueAt(i, 0);
                per.setVida((int) inimigosModel.getValueAt(i, 1));
                per.setVidaTemp((int) inimigosModel.getValueAt(i, 2));
                per.setClasseArmadura((int) inimigosModel.getValueAt(i, 3));
                per.setIniciativa((int) inimigosModel.getValueAt(i, 4));
                inimigosModel.setValueAt(per, i, 0);
            }
            msg_salvo_inimLabel.setText("Alterações salvas com sucesso!");
            msg_salvo_inimLabel.setForeground(Color.black);
            salvo = true;
            
        }
    }//GEN-LAST:event_salvarAlteracoesInimigos

    private void clickJanela(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clickJanela
        if(salvo){
            msg_salvo_inimLabel.setText("");
            msg_salvo_jogLabel.setText("");
            turn_orderLabel.setText("Turn Order" + " " + pos + " " + turn_orderTable.getSelectedRow());
        }        
    }//GEN-LAST:event_clickJanela

    private void salvarEscudo(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarEscudo
        try {
            String mensagem_erro = null;
            Escudo escudo = obtemEscudoInformado();
            Arquivo<Escudo> arq = null;
            
            if (escudo == null) {
                mensagem_erro = "Informe o nome da aventura!";
                JOptionPane.showMessageDialog(this, mensagem_erro, "Informação", JOptionPane.INFORMATION_MESSAGE);
            }else{
                if(Escudo.existeEscudo(escudo.getNome())) {
                    mensagem_erro = "Aventura " + escudo.getNome() + " já existe, deseja substituí-la?";
                    int substituir = JOptionPane.showConfirmDialog(this, mensagem_erro, "ATENÇÂO", JOptionPane.WARNING_MESSAGE);
                    if(substituir == 0){
                        arq = new Arquivo<>(System.getProperty("user.dir") + "//files//escudos//" + escudo.getNome() + ".esc");
                        mensagem_erro = arq.salvar(escudo);
                        JOptionPane.showMessageDialog(this, mensagem_erro, "Informação", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
                else {
                    arq = new Arquivo<>(System.getProperty("user.dir") + "//files//escudos//" + escudo.getNome() + ".esc");
                    mensagem_erro = arq.salvar(escudo);
                    JOptionPane.showMessageDialog(this, mensagem_erro, "Informação", JOptionPane.INFORMATION_MESSAGE);
                }
            }
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_salvarEscudo

    private void abrirEscudoJanela(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirEscudoJanela
        filesModel_esc = new GenericListModel<>(Arquivo.getArquivos(PATH_ESC));
        escudos_salvosList.setModel(filesModel_esc);
        janela_consultar_escudosFrame.setVisible(true);
    }//GEN-LAST:event_abrirEscudoJanela

    private void escudos_salvosListadicionarPersonagemClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_escudos_salvosListadicionarPersonagemClick
        if (evt.getClickCount() == 2 && !evt.isConsumed()) {
            evt.consume();
            File file = (File)escudos_salvosList.getSelectedValue();
            Escudo escudo;
            try {
                escudo = arq_esc.carregar(file.getAbsolutePath());
                aventuraTextField.setText(escudo.getNome());
                obsTextArea.setText(escudo.getObs());
                pos = escudo.getPosTurnOrder() - 1;
                
                //removendo dados atuais
                for(int i = 0; i < jogadoresModel.getRowCount(); i++){
                    jogadoresModel.removeRow(i);
                }
                for(int i = 0; i < inimigosModel.getRowCount(); i++){
                    inimigosModel.removeRow(i);
                }
                for(int i = 0; i < turn_orderModel.getRowCount(); i++){
                    turn_orderModel.removeRow(i);
                }
                
                //adicionando dados novos
                for(int i = 0; i < escudo.getJogadores().size(); i++){
                    jogadoresModel.addRow( new Object[]{
                            escudo.getJogadores().get(i),
                            escudo.getJogadores().get(i).getVida(),
                            escudo.getJogadores().get(i).getVidaTemp(),
                            escudo.getJogadores().get(i).getClasseArmadura(),
                            escudo.getJogadores().get(i).getIniciativa()                        
                    });
                }
                for(int i = 0; i < escudo.getInimigos().size(); i++){
                    inimigosModel.addRow( new Object[]{
                            escudo.getInimigos().get(i),
                            escudo.getInimigos().get(i).getVida(),
                            escudo.getInimigos().get(i).getVidaTemp(),
                            escudo.getInimigos().get(i).getClasseArmadura(),
                            escudo.getInimigos().get(i).getIniciativa()                        
                    });
                }
                for(int i = 0; i < escudo.getTurnOrder().size(); i++){
                    turn_orderModel.addRow( new Object[]{
                            escudo.getTurnOrder().get(i).getIniciativa(),
                            escudo.getTurnOrder().get(i),
                            escudo.getTurnOrder().get(i).getVida()                     
                    });
                }
                ordenaTurnOrder();               

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(JanelaEscudo.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_escudos_salvosListadicionarPersonagemClick

    private void consultarEscudo(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultarEscudo
        File file = (File)escudos_salvosList.getSelectedValue();
        Escudo escudo;
        try {
            escudo = arq_esc.carregar(file.getAbsolutePath());
            aventuraTextField.setText(escudo.getNome());
            obsTextArea.setText(escudo.getObs());
            pos = escudo.getPosTurnOrder() - 1;

            //removendo dados atuais
            for(int i = 0; i < jogadoresModel.getRowCount(); i++){
                jogadoresModel.removeRow(i);
            }
            for(int i = 0; i < inimigosModel.getRowCount(); i++){
                inimigosModel.removeRow(i);
            }
            for(int i = 0; i < turn_orderModel.getRowCount(); i++){
                turn_orderModel.removeRow(i);
            }

            //adicionando dados novos
            for(int i = 0; i < escudo.getJogadores().size(); i++){
                jogadoresModel.addRow( new Object[]{
                        escudo.getJogadores().get(i),
                        escudo.getJogadores().get(i).getVida(),
                        escudo.getJogadores().get(i).getVidaTemp(),
                        escudo.getJogadores().get(i).getClasseArmadura(),
                        escudo.getJogadores().get(i).getIniciativa()                        
                });
            }
            for(int i = 0; i < escudo.getInimigos().size(); i++){
                inimigosModel.addRow( new Object[]{
                        escudo.getInimigos().get(i),
                        escudo.getInimigos().get(i).getVida(),
                        escudo.getInimigos().get(i).getVidaTemp(),
                        escudo.getInimigos().get(i).getClasseArmadura(),
                        escudo.getInimigos().get(i).getIniciativa()                        
                });
            }
            for(int i = 0; i < escudo.getTurnOrder().size(); i++){
                turn_orderModel.addRow( new Object[]{
                        escudo.getTurnOrder().get(i).getIniciativa(),
                        escudo.getTurnOrder().get(i),
                        escudo.getTurnOrder().get(i).getVida()                     
                });
            }
            ordenaTurnOrder();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(JanelaEscudo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_consultarEscudo

    private void excluirEscudo(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluirEscudo
        File file = (File)escudos_salvosList.getSelectedValue();
        try {
            int excluir = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja apagar o escudo PERMANENTEMENTE?", "ATENÇÂO", JOptionPane.WARNING_MESSAGE);
            if(excluir == 0){
                if(file.delete()){
                    filesModel_esc.removeElement(file);
                    JOptionPane.showMessageDialog(this, file.getName() + " foi apagado!", "Informação", JOptionPane.INFORMATION_MESSAGE);
                }else{
                    JOptionPane.showMessageDialog(this, "Falha na operação! Arquivo não excluído.", "Informação", JOptionPane.INFORMATION_MESSAGE);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_excluirEscudo
    
    private Escudo obtemEscudoInformado(){
        String nome = aventuraTextField.getText();
        if(nome.isEmpty()) return null;
        String obs = obsTextArea.getText();
        
        Escudo escudo = new Escudo(nome, obs, pos);
        
        List<Personagem> jogadores = new ArrayList<>();
        List<Personagem> inimigos = new ArrayList<>();
        List<Iniciativa> turnOrder = new ArrayList<>();
        
        for(int i=0; i < jogadoresModel.getRowCount(); i++){
            Personagem per = (Personagem) jogadoresModel.getValueAt(i, 0);
            jogadores.add(per);
        }
        for(int i=0; i < inimigosModel.getRowCount(); i++){
            Personagem per = (Personagem) inimigosModel.getValueAt(i, 0);
            inimigos.add(per);
        }
        for(int i=0; i < turn_orderModel.getRowCount(); i++){
            Iniciativa ini = (Iniciativa) turn_orderModel.getValueAt(i, 1);
            turnOrder.add(ini);
        }
        
        escudo.setJogadores(jogadores);
        escudo.setInimigos(inimigos);
        escudo.setTurnOrder(turnOrder);
        
        return escudo;
    }
    
    private void limpaCamposJanIniciativa(){
        ini_janela_iniciativaTextField.setText("0");
        nome_janela_iniciativaTextField.setText("");
        hp_janela_iniciativaTextField.setText("0");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JanelaEscudo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JanelaEscudo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JanelaEscudo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JanelaEscudo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JanelaEscudo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abrirButton;
    private javax.swing.JButton add_ini_tun_orderButton;
    private javax.swing.JButton add_iniciativaButton;
    private javax.swing.JButton add_inimigosButton;
    private javax.swing.JButton add_janela_iniciativaButton;
    private javax.swing.JButton add_jog_turn_orderButton;
    private javax.swing.JButton add_jogadoresButton;
    private javax.swing.JButton adicionar_perButtonJanela;
    private javax.swing.JButton anteButton;
    private javax.swing.JLabel aventuraLabel;
    private javax.swing.JTextField aventuraTextField;
    private javax.swing.JButton consultar_escButtonJanela;
    private javax.swing.JToggleButton editarToggleButton;
    private javax.swing.JLabel escudos_cadastradosLabel;
    private javax.swing.JList escudos_salvosList;
    private javax.swing.JButton excluirButton;
    private javax.swing.JTextField hp_janela_iniciativaTextField;
    private javax.swing.JTextField ini_janela_iniciativaTextField;
    private javax.swing.JLabel inimigosLabel;
    private javax.swing.JTable inimigosTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JFrame janela_add_iniciativaFrame;
    private javax.swing.JFrame janela_add_jogadoresFrame;
    private javax.swing.JFrame janela_consultar_escudosFrame;
    private javax.swing.JLabel jogadoresLabel;
    private javax.swing.JTable jogadoresTable;
    private javax.swing.JLabel msg_salvo_inimLabel;
    private javax.swing.JLabel msg_salvo_jogLabel;
    private javax.swing.JTextField nome_janela_iniciativaTextField;
    private javax.swing.JLabel obsLabel;
    private javax.swing.JTextArea obsTextArea;
    private javax.swing.JButton ordenaButton;
    private javax.swing.JLabel personagens_cadastradosLabel;
    private javax.swing.JList personagens_salvosList;
    private javax.swing.JButton proxButton;
    private javax.swing.JButton rem_iniciativaButton;
    private javax.swing.JButton rem_inimigosButton;
    private javax.swing.JButton rem_jogadoresButton;
    private javax.swing.JButton salvarButton;
    private javax.swing.JButton salvar_inimigosButton;
    private javax.swing.JButton salvar_jogadoresButton;
    private javax.swing.JLabel turn_orderLabel;
    private javax.swing.JTable turn_orderTable;
    // End of variables declaration//GEN-END:variables
}
